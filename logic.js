// üìÅ logic.js

// This module manages persistent data, daily reset logic, reward summarisation,
// numeric adjustments and interactive responses for the smoking bot. It also
// defines a rich set of reactions for the virtual character ÊÇ†ÊÇ† so that the
// bot can generate varied feedback based on both smoking counts and user
// interactions.

const fs = require('fs');
const path = './data.json';
const rewards = require('./rewards.json');

/* --------------------------------------------------------------------------
 * Helpers for loading, saving and resetting persistent data
 * ------------------------------------------------------------------------ */

// Return current date string (YYYY-MM-DD).
function getToday () {
  return new Date().toISOString().slice(0, 10);
}

// Ensure the data file exists; initialise with default values if absent.
function ensureDataFile () {
  if (!fs.existsSync(path)) {
    const initial = { date: getToday(), today: 0, yesterday: 0, streak: 0 };
    fs.writeFileSync(path, JSON.stringify(initial, null, 2));
  }
}

// Load persisted data.
function loadData () {
  ensureDataFile();
  return JSON.parse(fs.readFileSync(path));
}

// Save data to disk.
function saveData (data) {
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

// If stored date differs from today, roll today into yesterday and reset today.
function autoResetIfNewDay (data) {
  const today = getToday();
  if (data.date !== today) {
    data.yesterday = data.today;
    data.today = 0;
    data.date = today;
  }
  return data;
}

/* --------------------------------------------------------------------------
 * Reaction templates for smoking counts 1‚Äì20
 * ------------------------------------------------------------------------ */

// Predefined messages for counts 1‚Äì20 including ÊÇ†ÊÇ†‚Äôs reactions. Each string
// contains a base message with line breaks. If today‚Äôs count lies within
// 1..20, the corresponding entry will be used verbatim.
const countReactions = [
  '‰ªäÂ§©Á¨¨ 1 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 1 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËÅΩÂà∞ÂæåÊâì‰∫ÜÂÄãÂìàÊ¨†ÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ëú∑Á∏ÆÂú®‰∏ÄËµ∑ÔºåÁú®‰∫ÜÁú®ÁúºÂ∞±Áù°Ëëó‰∫Ü(ÀòœâÀò).ÔΩ°oOüí§ÔΩûÂïæÔΩû',
  '‰ªäÂ§©Á¨¨ 2 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 2 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áøª‰∫ÜÂÄãË∫´ÔºåÁî®Â∞èÁà™Â≠êÊãçÊãçËá™Â∑±ÁöÑËáâÈ†∞ÔºåÂèàÁî®Â∞æÂ∑¥Âú®Á©∫‰∏≠Áï´ÂúàÂúà(À∂Àö·¥óÀöÀ∂)ÔΩ°oO',
  '‰ªäÂ§©Á¨¨ 3 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 3 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóÂ∞èÊâãËºïËºïÊèÆÊâãÔºåÁúºÁùõÁûáÊàê‰∏ÄÊ¢ùÁ∑öÔºåÁôºÂá∫ËºïËºïÁöÑÂïæÂïæËÅ≤(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿàüí®',
  '‰ªäÂ§©Á¨¨ 4 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 4 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÊè£Âú®ËÉ∏ÂâçÔºåËÖ¶Ë¢ãÊ≠™‰∫Ü‰∏Ä‰∏ã(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?ÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìÂú∞Èù¢Êí≤ÈÄöÊí≤ÈÄö',
  '‰ªäÂ§©Á¨¨ 5 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 5 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êíì‰∫ÜÊíìËÇöÂ≠êÔºå‰º∏Âá∫Â∞èÁà™Â≠êÂÅöÂá∫ÊìÅÊä±ÂßøÂã¢ÔºåÁúºÁ•û‰∫Æ‰∫ÆÂú∞ÁúãËëó‰Ω†(*¬¥‚àÄ`)Ôæâ',
  '‰ªäÂ§©Á¨¨ 6 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 6 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊÇÑÊÇÑÂú∞Áî®Áà™Â≠êÈÅÆ‰ΩèÁúºÁùõÔºåÂÜçÂøΩÁÑ∂ÂºµÈñãÂÅöÂá∫È©öÂñúÁöÑÂãï‰Ωú(„Éª‚àÄ„Éª)„Éé',
  '‰ªäÂ§©Á¨¨ 7 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 7 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËºïËºïÊêñÊôÉËëóË∫´È´îÔºåÂ∞æÂ∑¥ÁπûÊàêÂ∞èÂúìÂúàÔºåÊúÄÂæåÊëüËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ë∫∫Âπ≥ÂóöÂóöÔΩû',
  '‰ªäÂ§©Á¨¨ 8 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 8 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÊâãÊãç‰∫ÜÊãçÊ∞¥Èù¢ÔºåÊø∫Âá∫Â∞èÊ∞¥Ëä±ÔºåÊèÆÊâãÁ§∫ÊÑè‰Ω†Èù†Ëøë(*‚âßœâ‚â¶)„Çû',
  '‰ªäÂ§©Á¨¨ 9 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 9 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÊªæÔºåËáâÈ†∞Ë≤ºÂú®Âú∞‰∏äÔºåÂ∞æÂ∑¥Áøπ‰∫ÜËµ∑‰æÜÔºåÂÅöÂá∫ÊííÂ¨åÁöÑÂãï‰Ωú( Àò‚Ä¢œâ‚Ä¢Àò )„Çù',
  '‰ªäÂ§©Á¨¨ 10 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 10 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êí≤ÈÄö‰∏Ä‰∏ãË∂¥Âú®‰Ω†Èù¢ÂâçÔºåÁî®Áà™Â≠êËºïÊí´Ëá™Â∑±ÁöÑËáâÈ†∞ÔºåÈú≤Âá∫ÊúüÂæÖÁöÑÁúºÁ•û(‰∫∫¬¥‚àÄÔΩÄ)‚ô°',
  '‰ªäÂ§©Á¨¨ 11 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 11 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÂÅ¥Ë∫´Ë∫∫ËëóÔºåÁúºÁùõÁú®ÂëÄÁú®ÔºåÂ∞æÂ∑¥ÁπûËëóËá™Â∑±Áï´ÂúìÔºåÂÉèÊòØÂú®ÊÄùËÄÉÂóöÂóöÔΩû',
  '‰ªäÂ§©Á¨¨ 12 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 12 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÂêàÂçÅÊîæÂú®ËÉ∏ÂâçÔºåËáâÈ†∞ÂæÆÁ¥ÖÔºåÁî®ÂäõÊêñÈ†≠Ë°®Á§∫ÊííÂ¨åÁöÑÊãíÁµï(‡πë>‚ó°<‡πë)',
  '‰ªäÂ§©Á¨¨ 13 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 13 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Á∏ÆÊàê‰∏ÄÂúòÔºåÂÜçÊÖ¢ÊÖ¢‰º∏Â±ïÂõõËÇ¢ÔºåÂ∞æÂ∑¥ËºïÈªûÂú∞Èù¢ÁôºÂá∫ÂïæÂïæËÅ≤(*ÀòÔ∏∂Àò*).ÔΩ°oO',
  '‰ªäÂ§©Á¨¨ 14 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 14 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÔºåÁú®ÁúºÂæÆÁ¨ëÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìËëóÂ∞èÊ∞¥Ëä±(‚âß‚ñΩ‚â¶)„Çû',
  '‰ªäÂ§©Á¨¨ 15 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 15 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÁà™Â≠êÊçÇ‰ΩèÂò¥Â∑¥ÔºåÂÉèÊòØÂú®ÊâìÂëµÊ¨†ÔºåÂèà‰º∏ÊâãÂêë‰Ω†Ë®éÊë∏Êë∏(À∂‚Äæ·∑Ñ ‚ÅªÃ´ ‚Äæ·∑ÖÀµ)',
  '‰ªäÂ§©Á¨¨ 16 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 16 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Áà™Â≠êÊãçÊãçÊ∞¥Èù¢ÔºåÁÑ∂ÂæåÊä¨È†≠ÁúãËëó‰Ω†ÔºåÂ∞æÂ∑¥Áπû‰∫ÜÂπæÂúàÂæåÂÅúÂú®ËÉ∏Ââç(ÀòÔΩ•·¥óÔΩ•Àò)',
  '‰ªäÂ§©Á¨¨ 17 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 17 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Â∞áÂ∞èÊâãÊîæÂú®ËáâÊóÅÔºåÁú®ÁúºË≥£ËêåÔºåÁî®Â∞æÂ∑¥ËºïÊãçËá™Â∑±ÂÉèÂú®Ëá™Ë®ÄËá™Ë™û(ÔΩ°>Ôπè<ÔΩ°)',
  '‰ªäÂ§©Á¨¨ 18 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 18 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Âú®ÂéüÂú∞Êâì‰∫ÜÂÄãÊªæÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÊííÂ¨åÔºåËÄ≥ÈÇäÂÇ≥‰æÜËºïËºïÁöÑÂïæÂïæËÅ≤(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•',
  '‰ªäÂ§©Á¨¨ 19 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 19 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊääÂ∞æÂ∑¥ÁπûÊàêÊÑõÂøÉÂΩ¢ÁãÄÔºåËºïËºïÈªûÈ†≠ÂèàÊêñÈ†≠ÔºåÂÉèÊòØÂú®Ë°®Á§∫ÁüõÁõæ(‚ô°ÀôÔ∏∂Àô‚ô°)',
  '‰ªäÂ§©Á¨¨ 20 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 20 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Âú®Ê∞¥Èù¢‰∏äÊÖ¢ÊÖ¢ÊâìËΩâÔºåÊúÄÂæåÈù†Âú®‰Ω†ËÖ≥ÈÇäÁù°Ëëó‰∫Ü( ·ê°-‹´-·ê° )üí§'
];

/* --------------------------------------------------------------------------
 * Components for constructing >1000 unique interaction responses
 * ------------------------------------------------------------------------ */

// Emoticons and expressive faces used by ÊÇ†ÊÇ† to convey emotion.
const emoticons = [
  '(À∂Àö·¥óÀöÀ∂)', '(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà', '(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?', '(‚âß‚ñΩ‚â¶)„Çû', '(ÀòœâÀò)', '(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•', '(ÔΩ°>Ôπè<ÔΩ°)', '(*¬¥‚àÄ`)Ôæâ'
];

// Sound words to accompany actions.
const sounds = ['ÂïæÂïæ', 'Êí≤ÈÄö', 'ÂóöÂóö', 'ÂëÄÔΩû'];

// Base descriptions for various user actions. Each entry may contain
// multiple variations to allow additional combinations.
const actionBases = {
  morning: [
    'ÊÇ†ÊÇ†ÊèâÊèâÁúºÁùõ‰º∏‰∫ÜÂÄãÊá∂ËÖ∞ÔºåÂêë‰Ω†ÊèÆÁà™ÊâìÊãõÂëº',
    'ÊÇ†ÊÇ†ÂæûÁù°Â§¢‰∏≠ÈÜí‰æÜÔºåÁú®ËëóËø∑ÊøõÁöÑÁúºÁùõÂ∞ç‰Ω†ÈªûÈ†≠'
  ],
  night: [
    'ÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÂëµÊ¨†ÔºåÁî®Â∞æÂ∑¥Ë£π‰ΩèËá™Â∑±Ê∫ñÂÇôÁù°Ë¶∫',
    'ÊÇ†ÊÇ†Á™©Êàê‰∏ÄÂúòÔºåÊÖ¢ÊÖ¢Èñâ‰∏äÁúºÁùõÊèÆÊâãÈÅìÊôöÂÆâ'
  ],
  pat: [
    'ÊÇ†ÊÇ†ÁúØËµ∑ÁúºÁùõ‰∫´Âèó‰Ω†ÁöÑÊí´Êë∏ÔºåÊä±ËëóÂ∞æÂ∑¥ÁôºÂá∫ÊªøË∂≥ÁöÑËÅ≤Èü≥',
    'ÊÇ†ÊÇ†ÊääÈ†≠Èù†Ëøë‰Ω†ÁöÑÊâãÊéåÔºåËºïËºïËπ≠‰∫ÜËπ≠Ë°®Á§∫ÂñúÊ≠°'
  ],
  tv: [
    'ÊÇ†ÊÇ†ÁõØËëóËû¢ÂπïÁúãÂæóÁõÆ‰∏çËΩâÁùõÔºåÂÅ∂ÁàæÊ≠™È†≠Ë°®ÈÅîÂ•ΩÂ•á',
    'ÊÇ†ÊÇ†ÂùêÂú®‰Ω†ÊóÅÈÇäÁúãÈõªË¶ñÔºåÊôÇ‰∏çÊôÇÊãçÊâìÂ∞æÂ∑¥Á§∫ÊÑè‰Ω†Ê≥®ÊÑèÁ≤æÂΩ©Áï´Èù¢'
  ],
  default: [
    'ÊÇ†ÊÇ†Ê≠™ËëóÈ†≠ÁúãÁúã‰Ω†Ôºå‰∏çÂ§™ÊòéÁôΩ‰ΩÜÈÇÑÊòØÂèØÊÑõÂú∞ÊèÆ‰∫ÜÊèÆÁà™',
    'ÊÇ†ÊÇ†Êªæ‰∫ÜÂÄãÂúàÂúàÔºåÂ∞æÂ∑¥ËºïÊãçÂú∞Èù¢Á§∫ÊÑèÁâ†ËÅΩ‰∏çÊáÇ'
  ]
};

/**
 * Randomly select an element from an array.
 */
function choice (arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * Construct a reaction string by combining a base description with a random
 * emoticon and a random sound word. This yields a large number of unique
 * combinations (8 emoticons √ó 4 sounds √ó variations of bases).
 */
function buildReaction (base) {
  const emoji = choice(emoticons);
  const sound = choice(sounds);
  return `${base}${emoji}ÔΩû${sound}`;
}

/**
 * Determine the category of a user interaction message. Simple keyword
 * matching is used here; if no keywords match, returns 'default'.
 */
function getActionCategory (message) {
  if (/(Êó©ÂÆâ|Êó©‰∏äÂ•Ω|morning)/i.test(message)) return 'morning';
  if (/(ÊôöÂÆâ|good\s*night)/i.test(message)) return 'night';
  if (/(Êë∏|Êí´Êë∏|Êë∏Êë∏|pat)/i.test(message)) return 'pat';
  if (/(ÁúãÈõªË¶ñ|ÁúãÁîµËßÜ|tv)/i.test(message)) return 'tv';
  return 'default';
}

/**
 * Handle interactive messages that are not numeric adjustments or commands.
 * Generates a rich reaction from ÊÇ†ÊÇ† based on the detected action category.
 */
function handleInteraction (event, client, message) {
  const data = loadData();
  autoResetIfNewDay(data);
  const category = getActionCategory(message);
  const base = choice(actionBases[category] || actionBases.default);
  const reaction = buildReaction(base);
  return client.replyMessage(event.replyToken, { type: 'text', text: reaction });
}

/* --------------------------------------------------------------------------
 * Functions for adjusting smoking counts and handling commands
 * ------------------------------------------------------------------------ */

/**
 * Adjust today‚Äôs smoking count by the provided signed integer amount. Counts
 * never fall below zero. After adjustment, reply with a corresponding
 * reaction. For counts between 1 and 20, a predefined reaction is used; for
 * other counts, a generic comparison message is constructed.
 */
function handleAdjust (event, client, amount) {
  const data = loadData();
  autoResetIfNewDay(data);
  data.today += amount;
  if (data.today < 0) data.today = 0;
  saveData(data);
  let response;
  const n = data.today;
  if (n >= 1 && n <= 20) {
    response = countReactions[n - 1];
  } else if (n === 0) {
    response = '‰ªäÂ§©ÈÇÑÊ≤íÊäΩËè∏Ôºå‰øùÊåÅ‰∏ãÂéªÔºÅÊÇ†ÊÇ†ÈõôÊâãÂêàÊéåÁÇ∫‰Ω†ÊâìÊ∞£(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà';
  } else {
    response = `‰ªäÂ§©Á¨¨ ${n} ÊîØËè∏„ÄÇ`;
    if (n < data.yesterday) {
      response += `\nÊØîÊò®Â§©Â∞ë‰∫Ü ${data.yesterday - n} ÊîØÔºå‰∏çÈåØÂñîÔºÅ`;
    } else if (n === data.yesterday) {
      response += `\nÂ∑≤Á∂ìË∑üÊò®Â§©‰∏ÄÊ®£Â§ö‰∫ÜÔºåË¶ÅÂÖãÂà∂Âî∑„ÄÇ`;
    } else {
      response += `\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ ${n} ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü`;
    }
    response += '\nÊÇ†ÊÇ†Ê≠™ËëóÈ†≠ÁúãÁúã‰Ω†ÔºåÂ∞æÂ∑¥Âú®Ë∫´ÊóÅÂäÉÂúàÔºå‰ºº‰πéÂú®ÊÄùËÄÉ(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?';
  }
  return client.replyMessage(event.replyToken, { type: 'text', text: response });
}

/**
 * Handle slash commands starting with '/'. Recognised commands include:
 *   /Êü•Ë©¢ or /Êü•Ë©¢‰ªäÊó• ‚Äì report today/yesterday counts and streak.
 *   /Êü•Ë©¢Êò®Êó• ‚Äì report yesterday‚Äôs count only.
 *   /ÈáçË®≠ ‚Äì reset today‚Äôs count to zero.
 *   /Ë™™Êòé ‚Äì provide help text.
 */
function handleCommand (msg, event, client) {
  const data = loadData();
  autoResetIfNewDay(data);
  if (msg === '/Êü•Ë©¢' || msg === '/Êü•Ë©¢‰ªäÊó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‰ªäÊó•Â∑≤ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏Ôºö${data.streak} Â§©„ÄÇ`
    });
  }
  if (msg === '/Êü•Ë©¢Êò®Êó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `Êò®Êó•ÊäΩ‰∫Ü ${data.yesterday} ÊîØ„ÄÇ`
    });
  }
  if (msg === '/ÈáçË®≠') {
    data.today = 0;
    saveData(data);
    return client.replyMessage(event.replyToken, { type: 'text', text: '‰ªäÊó•Á¥ÄÈåÑÂ∑≤ÈáçË®≠ÁÇ∫ 0„ÄÇ' });
  }
  if (msg === '/Ë™™Êòé') {
    const help = [
      'ÂèØÁî®Êåá‰ª§Ôºö',
      '+1 Êàñ +nÔºöÂ¢ûÂä†‰ªäÊó•ÊäΩËè∏Êï∏',
      '-1 Êàñ -nÔºöÊ∏õÂ∞ë‰ªäÊó•ÊäΩËè∏Êï∏',
      '/Êü•Ë©¢ Êàñ /Êü•Ë©¢‰ªäÊó•ÔºöÊü•Áúã‰ªäÊó•ËàáÊò®Êó•ÊäΩËè∏Êï∏‰ª•ÂèäÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏',
      '/Êü•Ë©¢Êò®Êó•ÔºöÊü•ÁúãÊò®Êó•ÊäΩËè∏Êï∏',
      '/ÈáçË®≠ÔºöÈáçË®≠‰ªäÊó•Ë®àÊï∏ÁÇ∫ 0',
      '/Ë™™ÊòéÔºöÈ°ØÁ§∫ÈÄôÊÆµË™™Êòé',
      'ÂÖ∂‰ªñË®äÊÅØÂ∞áË¶ñÁÇ∫Â∞çÊÇ†ÊÇ†ÁöÑ‰∫íÂãïÔºåÁâ†ÊúÉ‰ª•ÂèØÊÑõÁöÑÂãï‰ΩúÂõûÊáâÂñî'
    ].join('\n');
    return client.replyMessage(event.replyToken, { type: 'text', text: help });
  }
  return client.replyMessage(event.replyToken, { type: 'text', text: 'ÁÑ°ÊïàÊåá‰ª§„ÄÇ' });
}

/**
 * Reset today‚Äôs count at scheduled time; move today to yesterday and zero it.
 */
function resetDaily () {
  const data = loadData();
  autoResetIfNewDay(data);
  data.yesterday = data.today;
  data.today = 0;
  saveData(data);
  console.log('ÊØèÊó•ÈáçÁΩÆÂÆåÊàê');
}

/**
 * Summarize the day‚Äôs results. If today‚Äôs count is less than yesterday‚Äôs,
 * increment the streak and award a prize (capped by rewards array length).
 * Sends messages via pushMessage including images and text where applicable.
 */
function summarizeDay (client) {
  const data = loadData();
  autoResetIfNewDay(data);
  let reward = null;
  if (data.today < data.yesterday) {
    data.streak += 1;
    const stage = Math.min(data.streak, rewards.length);
    reward = rewards[stage - 1];
  } else {
    data.streak = 0;
  }
  saveData(data);
  const messages = [
    {
      type: 'text',
      text: `‰ªäÊó•ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÔºö${data.streak} Â§©„ÄÇ`
    }
  ];
  if (reward) {
    messages.push({ type: 'image', originalContentUrl: reward.image, previewImageUrl: reward.image });
    messages.push({ type: 'text', text: reward.text });
  }
  client.pushMessage(process.env.USER_ID, messages);
  console.log('Êó•ÁµêË®äÊÅØÁôºÈÄÅÂÆåÁï¢');
}

module.exports = {
  handleAdjust,
  handleCommand,
  resetDaily,
  summarizeDay,
  handleInteraction
};