// üìÅ logic.js

// This module manages persistent data, daily reset logic, reward summarisation,
// numeric adjustments and interactive responses for the smoking bot. It also
// defines a rich set of reactions for the virtual character ÊÇ†ÊÇ† so that the
// bot can generate varied feedback based on both smoking counts and user
// interactions.

const fs = require('fs');
const https = require('https');
const path = './data.json';
const rewards = require('./rewards.json');

/* --------------------------------------------------------------------------
 * Helpers for loading, saving and resetting persistent data
 * ------------------------------------------------------------------------ */

// Return current date string (YYYY-MM-DD).
function getToday () {
  return new Date().toISOString().slice(0, 10);
}

// Ensure the data file exists; initialise with default values if absent.
function ensureDataFile () {
  if (!fs.existsSync(path)) {
    const initial = { date: getToday(), today: 0, yesterday: 0, streak: 0 };
    fs.writeFileSync(path, JSON.stringify(initial, null, 2));
  }
}

// Load persisted data.
function loadData () {
  ensureDataFile();
  return JSON.parse(fs.readFileSync(path));
}

// Save data to disk.
function saveData (data) {
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

// If stored date differs from today, roll today into yesterday and reset today.
function autoResetIfNewDay (data) {
  const today = getToday();
  if (data.date !== today) {
    data.yesterday = data.today;
    data.today = 0;
    data.date = today;
  }
  return data;
}

/* --------------------------------------------------------------------------
 * Reaction templates for smoking counts 1‚Äì20
 * ------------------------------------------------------------------------ */

// Predefined messages for counts 1‚Äì20 including ÊÇ†ÊÇ†‚Äôs reactions. Each string
// contains a base message with line breaks. If today‚Äôs count lies within
// 1..20, the corresponding entry will be used verbatim.
const countReactions = [
  '‰ªäÂ§©Á¨¨ 1 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 1 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËÅΩÂà∞ÂæåÊâì‰∫ÜÂÄãÂìàÊ¨†ÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ëú∑Á∏ÆÂú®‰∏ÄËµ∑ÔºåÁú®‰∫ÜÁú®ÁúºÂ∞±Áù°Ëëó‰∫Ü(ÀòœâÀò).ÔΩ°oOüí§ÔΩûÂïæÔΩû',
  '‰ªäÂ§©Á¨¨ 2 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 2 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áøª‰∫ÜÂÄãË∫´ÔºåÁî®Â∞èÁà™Â≠êÊãçÊãçËá™Â∑±ÁöÑËáâÈ†∞ÔºåÂèàÁî®Â∞æÂ∑¥Âú®Á©∫‰∏≠Áï´ÂúàÂúà(À∂Àö·¥óÀöÀ∂)ÔΩ°oO',
  '‰ªäÂ§©Á¨¨ 3 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 3 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóÂ∞èÊâãËºïËºïÊèÆÊâãÔºåÁúºÁùõÁûáÊàê‰∏ÄÊ¢ùÁ∑öÔºåÁôºÂá∫ËºïËºïÁöÑÂïæÂïæËÅ≤(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿàüí®',
  '‰ªäÂ§©Á¨¨ 4 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 4 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÊè£Âú®ËÉ∏ÂâçÔºåËÖ¶Ë¢ãÊ≠™‰∫Ü‰∏Ä‰∏ã(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?ÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìÂú∞Èù¢Êí≤ÈÄöÊí≤ÈÄö',
  '‰ªäÂ§©Á¨¨ 5 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 5 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êíì‰∫ÜÊíìËÇöÂ≠êÔºå‰º∏Âá∫Â∞èÁà™Â≠êÂÅöÂá∫ÊìÅÊä±ÂßøÂã¢ÔºåÁúºÁ•û‰∫Æ‰∫ÆÂú∞ÁúãËëó‰Ω†(*¬¥‚àÄ`)Ôæâ',
  '‰ªäÂ§©Á¨¨ 6 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 6 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊÇÑÊÇÑÂú∞Áî®Áà™Â≠êÈÅÆ‰ΩèÁúºÁùõÔºåÂÜçÂøΩÁÑ∂ÂºµÈñãÂÅöÂá∫È©öÂñúÁöÑÂãï‰Ωú(„Éª‚àÄ„Éª)„Éé',
  '‰ªäÂ§©Á¨¨ 7 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 7 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËºïËºïÊêñÊôÉËëóË∫´È´îÔºåÂ∞æÂ∑¥ÁπûÊàêÂ∞èÂúìÂúàÔºåÊúÄÂæåÊëüËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ë∫∫Âπ≥ÂóöÂóöÔΩû',
  '‰ªäÂ§©Á¨¨ 8 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 8 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÊâãÊãç‰∫ÜÊãçÊ∞¥Èù¢ÔºåÊø∫Âá∫Â∞èÊ∞¥Ëä±ÔºåÊèÆÊâãÁ§∫ÊÑè‰Ω†Èù†Ëøë(*‚âßœâ‚â¶)„Çû',
  '‰ªäÂ§©Á¨¨ 9 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 9 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÊªæÔºåËáâÈ†∞Ë≤ºÂú®Âú∞‰∏äÔºåÂ∞æÂ∑¥Áøπ‰∫ÜËµ∑‰æÜÔºåÂÅöÂá∫ÊííÂ¨åÁöÑÂãï‰Ωú( Àò‚Ä¢œâ‚Ä¢Àò )„Çù',
  '‰ªäÂ§©Á¨¨ 10 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 10 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êí≤ÈÄö‰∏Ä‰∏ãË∂¥Âú®‰Ω†Èù¢ÂâçÔºåÁî®Áà™Â≠êËºïÊí´Ëá™Â∑±ÁöÑËáâÈ†∞ÔºåÈú≤Âá∫ÊúüÂæÖÁöÑÁúºÁ•û(‰∫∫¬¥‚àÄÔΩÄ)‚ô°',
  '‰ªäÂ§©Á¨¨ 11 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 11 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÂÅ¥Ë∫´Ë∫∫ËëóÔºåÁúºÁùõÁú®ÂëÄÁú®ÔºåÂ∞æÂ∑¥ÁπûËëóËá™Â∑±Áï´ÂúìÔºåÂÉèÊòØÂú®ÊÄùËÄÉÂóöÂóöÔΩû',
  '‰ªäÂ§©Á¨¨ 12 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 12 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÂêàÂçÅÊîæÂú®ËÉ∏ÂâçÔºåËáâÈ†∞ÂæÆÁ¥ÖÔºåÁî®ÂäõÊêñÈ†≠Ë°®Á§∫ÊííÂ¨åÁöÑÊãíÁµï(‡πë>‚ó°<‡πë)',
  '‰ªäÂ§©Á¨¨ 13 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 13 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Á∏ÆÊàê‰∏ÄÂúòÔºåÂÜçÊÖ¢ÊÖ¢‰º∏Â±ïÂõõËÇ¢ÔºåÂ∞æÂ∑¥ËºïÈªûÂú∞Èù¢ÁôºÂá∫ÂïæÂïæËÅ≤(*ÀòÔ∏∂Àò*).ÔΩ°oO',
  '‰ªäÂ§©Á¨¨ 14 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 14 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÔºåÁú®ÁúºÂæÆÁ¨ëÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìËëóÂ∞èÊ∞¥Ëä±(‚âß‚ñΩ‚â¶)„Çû',
  '‰ªäÂ§©Á¨¨ 15 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 15 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÁà™Â≠êÊçÇ‰ΩèÂò¥Â∑¥ÔºåÂÉèÊòØÂú®ÊâìÂëµÊ¨†ÔºåÂèà‰º∏ÊâãÂêë‰Ω†Ë®éÊë∏Êë∏(À∂‚Äæ·∑Ñ ‚ÅªÃ´ ‚Äæ·∑ÖÀµ)',
  '‰ªäÂ§©Á¨¨ 16 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 16 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Áà™Â≠êÊãçÊãçÊ∞¥Èù¢ÔºåÁÑ∂ÂæåÊä¨È†≠ÁúãËëó‰Ω†ÔºåÂ∞æÂ∑¥Áπû‰∫ÜÂπæÂúàÂæåÂÅúÂú®ËÉ∏Ââç(ÀòÔΩ•·¥óÔΩ•Àò)',
  '‰ªäÂ§©Á¨¨ 17 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 17 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Â∞áÂ∞èÊâãÊîæÂú®ËáâÊóÅÔºåÁú®ÁúºË≥£ËêåÔºåÁî®Â∞æÂ∑¥ËºïÊãçËá™Â∑±ÂÉèÂú®Ëá™Ë®ÄËá™Ë™û(ÔΩ°>Ôπè<ÔΩ°)',
  '‰ªäÂ§©Á¨¨ 18 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 18 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Âú®ÂéüÂú∞Êâì‰∫ÜÂÄãÊªæÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÊííÂ¨åÔºåËÄ≥ÈÇäÂÇ≥‰æÜËºïËºïÁöÑÂïæÂïæËÅ≤(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•',
  '‰ªäÂ§©Á¨¨ 19 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 19 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊääÂ∞æÂ∑¥ÁπûÊàêÊÑõÂøÉÂΩ¢ÁãÄÔºåËºïËºïÈªûÈ†≠ÂèàÊêñÈ†≠ÔºåÂÉèÊòØÂú®Ë°®Á§∫ÁüõÁõæ(‚ô°ÀôÔ∏∂Àô‚ô°)',
  '‰ªäÂ§©Á¨¨ 20 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 20 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Âú®Ê∞¥Èù¢‰∏äÊÖ¢ÊÖ¢ÊâìËΩâÔºåÊúÄÂæåÈù†Âú®‰Ω†ËÖ≥ÈÇäÁù°Ëëó‰∫Ü( ·ê°-‹´-·ê° )üí§'
];

/* --------------------------------------------------------------------------
 * Components for constructing >1000 unique interaction responses
 * ------------------------------------------------------------------------ */

// Emoticons and expressive faces used by ÊÇ†ÊÇ† to convey emotion.
const emoticons = [
  '(À∂Àö·¥óÀöÀ∂)', '(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà', '(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?', '(‚âß‚ñΩ‚â¶)„Çû', '(ÀòœâÀò)', '(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•', '(ÔΩ°>Ôπè<ÔΩ°)', '(*¬¥‚àÄ`)Ôæâ'
];

// Sound words to accompany actions.
const sounds = ['ÂïæÂïæ', 'Êí≤ÈÄö', 'ÂóöÂóö', 'ÂëÄÔΩû'];

/* --------------------------------------------------------------------------
 * Weather utilities
 * ------------------------------------------------------------------------ */

// Mapping of Open‚ÄëMeteo weather codes to descriptive Chinese phrases.  The codes
// follow the WMO standard where 0 denotes clear skies and increasing numbers
// represent increasing severity.  Only commonly occurring codes are mapped; any
// unknown codes will fall back to showing the numeric code.
const weatherCodeMap = {
  0: 'Êô¥Êúó',
  1: 'Â∞ëÈõ≤',
  2: 'ÂçäÈõ≤',
  3: 'Â§öÈõ≤',
  45: 'ÊúâÈúß',
  48: 'ÈúßÂáá',
  51: 'ËºïÂæÆÈúßÈõ®',
  53: '‰∏≠Â∫¶ÈúßÈõ®',
  55: 'Âº∑ÈúßÈõ®',
  56: 'ËºïÂæÆÂÜ∞ÈúßÈõ®',
  57: 'Âº∑ÂÜ∞ÈúßÈõ®',
  61: 'Â∞èÈõ®',
  63: '‰∏≠Èõ®',
  65: 'Â§ßÈõ®',
  66: 'ËºïÂæÆÂÜ∞Èõ®',
  67: 'Âº∑ÂÜ∞Èõ®',
  71: 'Â∞èÈõ™',
  73: '‰∏≠Èõ™',
  75: 'Â§ßÈõ™',
  77: 'Èõ™Á≤í',
  80: 'Èô£Èõ®',
  81: '‰∏≠Èô£Èõ®',
  82: 'Â§ßÈô£Èõ®',
  85: 'Èô£Èõ™',
  86: 'Âº∑Èô£Èõ™',
  95: 'Èõ∑Èõ®',
  96: 'Èõ∑Èõ®‰º¥ÊúâÂÜ∞Èõπ',
  99: 'Èõ∑Èõ®‰º¥ÊúâÂº∑ÂÜ∞Èõπ'
};

/**
 * Fetch the current and daily weather for Taipei City using the Open‚ÄëMeteo API.
 * The API does not require an API key.  Returns an object containing the
 * current temperature, maximum and minimum temperatures for today and a
 * descriptive string for the current weather code.  In case of failure, the
 * returned promise will reject.
 */
/**
 * Fetch detailed weather and air quality data for Taipei City using the
 * Open‚ÄëMeteo Weather and Air Quality APIs.  In addition to the current
 * conditions and daily maximum/minimum temperatures, this function also
 * retrieves the next six hours of temperature, relative humidity and
 * precipitation probability along with air quality indices including UV
 * index and fine particulate concentrations.  All values are averaged or
 * summarised to present a concise overview.  The function returns a
 * promise that resolves to an object with the following properties:
 *   currentTemp ‚Äì current temperature in ¬∞C
 *   max ‚Äì daily maximum temperature
 *   min ‚Äì daily minimum temperature
 *   codeDesc ‚Äì Chinese description of the current weather code
 *   nextMax ‚Äì maximum temperature over the next six hours
 *   nextMin ‚Äì minimum temperature over the next six hours
 *   avgHumidity ‚Äì average relative humidity (%) over the next six hours
 *   avgPrecip ‚Äì average precipitation probability (%) over the next six hours
 *   uvIndex ‚Äì current UV index
 *   pm25 ‚Äì current PM2.5 concentration (¬µg/m¬≥)
 *   pm10 ‚Äì current PM10 concentration (¬µg/m¬≥)
 */
function getTaipeiWeather () {
  // Endpoint for weather forecast with hourly variables: temperature, humidity and precipitation probability.
  const weatherUrl =
    'https://api.open-meteo.com/v1/forecast?latitude=25.0478&longitude=121.5319&current_weather=true&hourly=temperature_2m,relativehumidity_2m,precipitation_probability&daily=temperature_2m_max,temperature_2m_min&forecast_hours=6&timezone=Asia%2FTaipei';
  // Endpoint for air quality including UV index and particulate matter for the next six hours.
  const airUrl =
    'https://air-quality-api.open-meteo.com/v1/air-quality?latitude=25.0478&longitude=121.5319&hourly=uv_index,pm2_5,pm10&forecast_hours=6&timezone=Asia%2FTaipei';
  // Helper to perform HTTPS GET and parse JSON.
  function fetchJSON (url) {
    return new Promise((resolve, reject) => {
      https
        .get(url, res => {
          let body = '';
          res.on('data', chunk => (body += chunk));
          res.on('end', () => {
            try {
              resolve(JSON.parse(body));
            } catch (e) {
              reject(e);
            }
          });
        })
        .on('error', err => reject(err));
    });
  }
  return Promise.all([fetchJSON(weatherUrl), fetchJSON(airUrl)]).then(([w, a]) => {
    // Extract current weather and daily max/min.
    const currTemp = w.current_weather.temperature;
    const code = w.current_weather.weathercode;
    const max = w.daily.temperature_2m_max[0];
    const min = w.daily.temperature_2m_min[0];
    const desc = weatherCodeMap[code] || `‰ª£Á¢º ${code}`;
    // Extract next 6 hours hourly arrays (length may be less than 6 if API returns shorter horizon).
    const temps = (w.hourly.temperature_2m || []).slice(0, 6);
    const hums = (w.hourly.relativehumidity_2m || []).slice(0, 6);
    const precs = (w.hourly.precipitation_probability || []).slice(0, 6);
    const nextMax = temps.length ? Math.max(...temps) : null;
    const nextMin = temps.length ? Math.min(...temps) : null;
    const avgHumidity = hums.length
      ? Math.round(hums.reduce((a, b) => a + b, 0) / hums.length)
      : null;
    const avgPrecip = precs.length
      ? Math.round(precs.reduce((a, b) => a + b, 0) / precs.length)
      : null;
    // Air quality: take first hour as representative for current values.
    const uvIndex = a.hourly && a.hourly.uv_index ? a.hourly.uv_index[0] : null;
    const pm25 = a.hourly && a.hourly.pm2_5 ? a.hourly.pm2_5[0] : null;
    const pm10 = a.hourly && a.hourly.pm10 ? a.hourly.pm10[0] : null;
    return {
      currentTemp: currTemp,
      max,
      min,
      codeDesc: desc,
      nextMax,
      nextMin,
      avgHumidity,
      avgPrecip,
      uvIndex,
      pm25,
      pm10
    };
  });
}

/**
 * Compose a weather report string for Taipei using the given weather object.
 * Adds a cute reaction from ÊÇ†ÊÇ† to integrate with the virtual character‚Äôs
 * behaviour module.  The reaction is constructed using buildReaction.
 */
function composeWeatherReport (weather) {
  const base = 'ÊÇ†ÊÇ†Êä¨È†≠ÁúãÁúãÁ™óÂ§ñÁöÑÂ§©Ê∞£Ôºå';
  const reaction = buildReaction(base);
  // Build lines for the detailed report.  Only include optional values when available.
  const lines = [];
  lines.push(`Âè∞ÂåóÂ∏Ç‰ªäÊó•Â§©Ê∞£Ôºö${weather.codeDesc}„ÄÇ`);
  lines.push(`ÁèæÂú®Ê∫´Â∫¶ ${weather.currentTemp}¬∞CÔºåÊúÄÈ´ò ${weather.max}¬∞CÔºåÊúÄ‰Ωé ${weather.min}¬∞C„ÄÇ`);
  // Add next‚Äë6‚Äëhour summary if we have temperature range.
  if (weather.nextMin != null && weather.nextMax != null) {
    lines.push(`Êú™‰æÜ6Â∞èÊôÇÊ∞£Ê∫´ÁØÑÂúç ${weather.nextMin}¬∞CÔΩû${weather.nextMax}¬∞C„ÄÇ`);
  }
  // Add humidity and precipitation probability.
  if (weather.avgPrecip != null) {
    lines.push(`Âπ≥ÂùáÈôçÈõ®Ê©üÁéá ${weather.avgPrecip}%` + (weather.avgHumidity != null ? `ÔºåÂπ≥ÂùáÊøïÂ∫¶ ${weather.avgHumidity}%` : '') + '„ÄÇ');
  } else if (weather.avgHumidity != null) {
    lines.push(`Âπ≥ÂùáÊøïÂ∫¶ ${weather.avgHumidity}%„ÄÇ`);
  }
  // Add UV index and particulate matter if available.
  if (weather.uvIndex != null) {
    lines.push(`Á¥´Â§ñÁ∑öÊåáÊï∏ ${weather.uvIndex}` + (weather.pm25 != null ? `ÔºåPM2.5 ${weather.pm25}¬µg/m¬≥` : '') + (weather.pm10 != null ? `ÔºåPM10 ${weather.pm10}¬µg/m¬≥` : '') + '„ÄÇ');
  } else if (weather.pm25 != null || weather.pm10 != null) {
    const aq = [];
    if (weather.pm25 != null) aq.push(`PM2.5 ${weather.pm25}¬µg/m¬≥`);
    if (weather.pm10 != null) aq.push(`PM10 ${weather.pm10}¬µg/m¬≥`);
    lines.push(aq.join('Ôºå') + '„ÄÇ');
  }
  return lines.join('\n') + '\n' + reaction;
}

// Base descriptions for various user actions. Each entry may contain
// multiple variations to allow additional combinations.
const actionBases = {
  morning: [
    'ÊÇ†ÊÇ†ÊèâÊèâÁúºÁùõ‰º∏‰∫ÜÂÄãÊá∂ËÖ∞ÔºåÂêë‰Ω†ÊèÆÁà™ÊâìÊãõÂëº',
    'ÊÇ†ÊÇ†ÂæûÁù°Â§¢‰∏≠ÈÜí‰æÜÔºåÁú®ËëóËø∑ÊøõÁöÑÁúºÁùõÂ∞ç‰Ω†ÈªûÈ†≠'
  ],
  night: [
    'ÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÂëµÊ¨†ÔºåÁî®Â∞æÂ∑¥Ë£π‰ΩèËá™Â∑±Ê∫ñÂÇôÁù°Ë¶∫',
    'ÊÇ†ÊÇ†Á™©Êàê‰∏ÄÂúòÔºåÊÖ¢ÊÖ¢Èñâ‰∏äÁúºÁùõÊèÆÊâãÈÅìÊôöÂÆâ'
  ],
  pat: [
    'ÊÇ†ÊÇ†ÁúØËµ∑ÁúºÁùõ‰∫´Âèó‰Ω†ÁöÑÊí´Êë∏ÔºåÊä±ËëóÂ∞æÂ∑¥ÁôºÂá∫ÊªøË∂≥ÁöÑËÅ≤Èü≥',
    'ÊÇ†ÊÇ†ÊääÈ†≠Èù†Ëøë‰Ω†ÁöÑÊâãÊéåÔºåËºïËºïËπ≠‰∫ÜËπ≠Ë°®Á§∫ÂñúÊ≠°'
  ],
  tv: [
    'ÊÇ†ÊÇ†ÁõØËëóËû¢ÂπïÁúãÂæóÁõÆ‰∏çËΩâÁùõÔºåÂÅ∂ÁàæÊ≠™È†≠Ë°®ÈÅîÂ•ΩÂ•á',
    'ÊÇ†ÊÇ†ÂùêÂú®‰Ω†ÊóÅÈÇäÁúãÈõªË¶ñÔºåÊôÇ‰∏çÊôÇÊãçÊâìÂ∞æÂ∑¥Á§∫ÊÑè‰Ω†Ê≥®ÊÑèÁ≤æÂΩ©Áï´Èù¢'
  ],
  // ÂëºÂñäÂêçÂ≠óÊôÇÁöÑÂèçÊáâ
  name: [
    'ÊÇ†ÊÇ†ËÅΩÂà∞‰Ω†Âè´Áâ†ÂêçÂ≠óÔºåÁú®‰∫ÜÁú®ÁúºÔºåÁøª‰∫ÜÂÄãË∫´Êä±ËëóÂ∞æÂ∑¥ÁπºÁ∫åÊâìÁûåÁù°',
    'ÊÇ†ÊÇ†Êä¨Ëµ∑È†≠ÔºåËÄ≥ÊúµÂãï‰∫ÜÂãïÔºåÁî®Â∞èÁà™Â≠êÊãçÊãçËá™Â∑±ÁöÑËÉ∏Âè£ÂÉèÊòØÂú®ÂõûÁ≠î'
  ],
  // Áµ¶ÈªûÂøÉÊàñÈ§µÈ£üÊôÇÁöÑÂèçÊáâ
  feed: [
    'ÊÇ†ÊÇ†ËÅûÂà∞ÈªûÂøÉÁöÑÂë≥ÈÅìÔºåÁúºÁùõÁû¨Èñì‰∫Æ‰∫ÜËµ∑‰æÜÔºåÈõôÊâãÊä±‰ΩèÈªûÂøÉÂïÉÂïÉÂïÉ',
    'ÊÇ†ÊÇ†‰º∏Âá∫Â∞èÁà™Â≠êÊé•ÈÅéÈªûÂøÉÔºåÂ∞æÂ∑¥ÈñãÂøÉÂú∞Â∑¶Âè≥ÊêñÊôÉÔºåÂò¥Ë£°ÁôºÂá∫ÂïæÂïæËÅ≤'
  ],
  // ÊìÅÊä±ÊàñÊä±Êä±ÊôÇÁöÑÂèçÊáâ
  hug: [
    'ÊÇ†ÊÇ†Ë¢´‰Ω†Êä±Âú®Êá∑Ë£°Ôºå‰πñ‰πñÂú∞Á™©ËëóÔºåÂÅ∂ÁàæÁî®Â∞èÁà™Â≠êÊãçÊãç‰Ω†ÁöÑÊâãËáÇ',
    'ÊÇ†ÊÇ†Áî®Â∞æÂ∑¥Á∫è‰Ωè‰Ω†ÁöÑÊâãËáÇÔºåÁúºÁùõÁúØËµ∑‰æÜÔºå‰∏ÄËáâÊªøË∂≥Âú∞Ëπ≠Ëëó‰Ω†'
  ],
  // Áù°Ë¶∫ÊàñÊâìÁûåÁù°Áõ∏ÈóúÁöÑÂèçÊáâ
  sleep: [
    'ÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÂ§ßÂìàÊ¨†Ôºå‰º∏Â±ïÂõõËÇ¢ÂæåËú∑Á∏ÆÊàêÂúòÊÖ¢ÊÖ¢Èñâ‰∏äÁúºÁùõ',
    'ÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÔºåÁúºÁöÆË∂ä‰æÜË∂äÊ≤âÔºåÊúÄÂæåÁôºÂá∫ÂùáÂãªÁöÑÂëºÂê∏ËÅ≤Áù°Ëëó‰∫Ü'
  ],
  // Áé©ËÄçÊàñÈÄóÂºÑÊôÇÁöÑÂèçÊáâ
  play: [
    'ÊÇ†ÊÇ†ËààÂ•ÆÂú∞Âú®Ê∞¥Èù¢‰∏äÊí≤È®∞ÔºåÂ∞æÂ∑¥‰∏çÊôÇÊãçÂá∫Ê∞¥Ëä±ÔºåÈÇÄË´ã‰Ω†‰∏ÄËµ∑Áé©',
    'ÊÇ†ÊÇ†Áøª‰æÜË¶ÜÂéªÔºåÊäìËµ∑Â∞èÁü≥È†≠ÊããÂêëÁ©∫‰∏≠ÂèàÁî®Áà™Â≠êÊé•‰ΩèÔºåÁé©Âæó‰∏ç‰∫¶Ê®Ç‰πé'
  ],
  // ÂêÉÊù±Ë•øÁõ∏ÈóúÁöÑÂèçÊáâ
  eat: [
    'ÊÇ†ÊÇ†Âí¨ËëóÂ∞èÈ≠öÂπ≤ÔºåËáâÈ†∞ÈºìÈºìÁöÑÔºåÂêÉÂæóÊ¥•Ê¥•ÊúâÂë≥',
    'ÊÇ†ÊÇ†ÊãøËµ∑Ë≤ùÊÆºÁï∂Áõ§Â≠êÔºåÊÖ¢ÊÖ¢ÂìÅÂöêËëóÈªûÂøÉÔºåÂÅ∂ÁàæÊä¨ÁúºÁúãÁúã‰Ω†',
    'ÊÇ†ÊÇ†Êä±ËëóÈ£üÁâ©ÂïÉÂïÉÂïÉÔºåÂ∞æÂ∑¥ÊªøË∂≥Âú∞Êì∫Âãï'
  ],
  // ÂñùÊ∞¥Áõ∏ÈóúÁöÑÂèçÊáâ
  drink: [
    'ÊÇ†ÊÇ†ÊçßËµ∑Ê∏ÖÊ∞¥ÔºåÂóÖ‰∫ÜÂóÖÂæåÊÖ¢ÊÖ¢ÂïúÈ£≤ÔºåÁôºÂá∫ÊªøË∂≥ÁöÑÂòüÂöïËÅ≤',
    'ÊÇ†ÊÇ†Áî®Áà™Â≠êËàÄÊ∞¥ÂñùÔºåÂñùÂÆåÊâì‰∫ÜÂÄãÂóùÔºåÂÉèÊòØÂú®Ë™™Ë¨ùË¨ù',
    'ÊÇ†ÊÇ†‰∏ÄÈÇäÂñùÊ∞¥‰∏ÄÈÇäÁî®Â∞æÂ∑¥ÊãçÂá∫Ê∞¥Ëä±ÔºåÁé©ÁöÑÂæàÈñãÂøÉ'
  ],
  // ÈÅãÂãïÊàñË∑ëÊ≠•Áõ∏ÈóúÁöÑÂèçÊáâ
  exercise: [
    'ÊÇ†ÊÇ†Âú®Ê∞¥Èù¢‰∏äÂø´ÈÄüÂàíÂãïÔºåÂ∞èÁà™Â≠êÊí•Ê∞¥ÂÉèÊòØÂú®ÈÅãÂãï',
    'ÊÇ†ÊÇ†Ë∑ë‰æÜË∑ëÂéªÔºåÂ∞æÂ∑¥Â∑¶Âè≥Êì∫ÂãïÔºåÊï¥ÂÄã‰∫∫Ê¥ªÂäõÂçÅË∂≥',
    'ÊÇ†ÊÇ†‰º∏Â±ïÂõõËÇ¢ÂÅöÈÅãÂãïÔºåÊúÄÂæåË∫∫‰∏ãÂñòÂè£Ê∞£'
  ],
  // Ë∑≥ËàûÁõ∏ÈóúÁöÑÂèçÊáâ
  dance: [
    'ÊÇ†ÊÇ†Èö®ËëóÁÑ°ÂΩ¢ÁöÑÈü≥Ê®ÇÂú®Ê∞¥‰∏≠Êâ≠ÂãïÔºåÂÉèÊòØÂú®Ë∑≥Ëàû',
    'ÊÇ†ÊÇ†Á´ôËµ∑‰æÜÂÖ©ËÖ≥Ë∏©Ê∞¥ÔºåË∑üËëóÁØÄÂ•èÊì∫Â∞æÔºåÂæàÊúâÁØÄÂ•èÊÑü',
    'ÊÇ†ÊÇ†ÈõôÁà™‰∫§ÂèâÊãçÊéåÔºåËΩâÂúàÂúàË∑≥Ëµ∑ËàûËπà'
  ],
  // Âî±Ê≠åÁõ∏ÈóúÁöÑÂèçÊáâ
  sing: [
    'ÊÇ†ÊÇ†ÂºµÈñãÂò¥Â∑¥ÁôºÂá∫ÂïæÂïæËÅ≤ÔºåÂÉèÂú®Âî±Ê≠å',
    'ÊÇ†ÊÇ†Èñâ‰∏äÁúºÁùõËºïÂìºËëóÔºåÂ∞æÂ∑¥Èö®ÁØÄÂ•èÊôÉÂãï',
    'ÊÇ†ÊÇ†ÊãçËëóËÉ∏Âè£ÁôºÂá∫ÂíåË´ßÁöÑÈü≥ÁØÄÔºåÂ•ΩÂÉèÂú®ÊºîÂ•è'
  ],
  // ÁúãÊõ∏Èñ±ËÆÄÁõ∏ÈóúÁöÑÂèçÊáâ
  read: [
    'ÊÇ†ÊÇ†ÁõØËëóÊõ∏Êú¨ÁöÑÂ≠óÔºåÁúãÂæóÂæàË™çÁúüÔºåÂÅ∂ÁàæÁøªÂãïÈ†ÅÈù¢',
    'ÊÇ†ÊÇ†ÊãøËëó‰∏ÄÊú¨Â∞èÂÜäÂ≠êÔºåÁà™Â≠êÊåáËëóÂ≠óÊÖ¢ÊÖ¢Â≠∏Áøí',
    'ÊÇ†ÊÇ†Èù†ËëóÊûïÈ†≠ÁúãÊõ∏ÔºåÁúºÁ•ûÂ∞àÊ≥®ÔºåÂ∞æÂ∑¥ÂæÆÂæÆÊêñÊì∫'
  ],
  // Áï´Áï´Áõ∏ÈóúÁöÑÂèçÊáâ
  draw: [
    'ÊÇ†ÊÇ†Áî®Áà™Â≠êÂú®Ê≤ôÂú∞‰∏äÁï´Âá∫ÂúñÊ°àÔºåÁï´ÂÆåÊ¨£Ë≥ûËá™Â∑±ÁöÑ‰ΩúÂìÅ',
    'ÊÇ†ÊÇ†ÊäìËµ∑Â∞èÁü≥Â≠êÁï∂Á≠ÜÔºåÂú®ÊøïÊ≤ô‰∏äÁï´Áï´ÔºåÁï´Âá∫ÂèØÊÑõÁöÑÂøÉÂΩ¢',
    'ÊÇ†ÊÇ†ÊääÊµ∑ËóªÊéíÂàóÊàêÂúñÊ°àÔºåÂÉèÂú®Ââµ‰ΩúËóùË°ì'
  ],
  // ÊâìÊéÉÊàñÊ∏ÖÊΩîÁõ∏ÈóúÁöÑÂèçÊáâ
  clean: [
    'ÊÇ†ÊÇ†Áî®Â∞æÂ∑¥ÊéÉÊãÇËëóË∫´ÈÇäÁöÑÊ≤ôÂ≠êÔºåÊääÂ∞èÁ™©Êï¥ÁêÜ‰πæÊ∑®',
    'ÊÇ†ÊÇ†ÊãøËµ∑Â∞èÂà∑Â≠êÂà∑ËëóËá™Â∑±ÁöÑÊØõÔºåÊâìÁêÜÂæó‰πæ‰πæÊ∑®Ê∑®',
    'ÊÇ†ÊÇ†ÊääË≤ùÊÆºÂ†ÜÁñäÊï¥ÈΩäÔºåÊï¥ÁêÜÂÆåÊãçÊãçÊâãÊªøÊÑèÂú∞ÈªûÈ†≠'
  ],
  // Â∑•‰ΩúÁõ∏ÈóúÁöÑÂèçÊáâ
  work: [
    'ÊÇ†ÊÇ†Êà¥‰∏äÂ∞èÂ∏ΩÂ≠êÔºåÂ∞àÊ≥®Âú∞ÂøôËëóÊï¥ÁêÜËá™Â∑±ÁöÑËóèÂØ∂ÁÆ±',
    'ÊÇ†ÊÇ†‰ªîÁ¥∞Ê™¢Êü•ÊØè‰∏ÄÈ°ÜË≤ùÊÆºÔºåÂ∞±ÂÉèÂú®Â∞àÂøÉÂ∑•‰Ωú',
    'ÊÇ†ÊÇ†Âú®Ê∞¥‰∏≠‰æÜÂõûÊê¨ÈÅãÂ∞èÁü≥È†≠ÔºåÂò¥Ë£°ÁôºÂá∫Âä™ÂäõÁöÑÂïæÂïæËÅ≤'
  ],
  // Ë≥ºÁâ©ÊàñÈÄõË°óÁõ∏ÈóúÁöÑÂèçÊáâ
  shop: [
    'ÊÇ†ÊÇ†Êä±Ëëó‰∏ÄÂ†ÜË≤ùÊÆºÂÉèÊòØÂú®Ë≥ºÁâ©ÔºåÊåëÊåëÈÅ∏ÈÅ∏',
    'ÊÇ†ÊÇ†ÁúãÂà∞ÊºÇ‰∫ÆÁöÑÁü≥È†≠ËààÂ•ÆÂú∞ÊãøËµ∑‰æÜÔºåÂÉèÊòØÂú®ÈÄõË°ó',
    'ÊÇ†ÊÇ†ÊãøËëóÂ∞èË¢ãÂ≠êË£ùÊªøÂ∞èÈõ∂È£üÔºåÈñãÂøÉÂú∞ÂõûÂÆ∂'
  ],
  // ÁÉπÈ£™Áõ∏ÈóúÁöÑÂèçÊáâ
  cook: [
    'ÊÇ†ÊÇ†ÊääÊµ∑ËóªÂíåË≤ùÊÆºÊîæÂú®‰∏ÄËµ∑Êî™ÊãåÔºåÂÉèÂú®ÂÅöÊñôÁêÜ',
    'ÊÇ†ÊÇ†Ë™çÁúüÂú∞Áî®Áà™Â≠êÊçèËëóÂ∞èÈ≠öÂπ≤ÔºåÂÅöÊàêÊºÇ‰∫ÆÁöÑÊì∫Áõ§',
    'ÊÇ†ÊÇ†‰∏ÄÈÇäÁÉπÈ£™‰∏ÄÈÇäÂÅ∑ÂêÉÊùêÊñôÔºåÁúºÁùõÁúØÊàê‰∏ÄÊ¢ùÁ∑ö'
  ],
  // Â≠∏ÁøíÊàñËÆÄÊõ∏Áõ∏ÈóúÁöÑÂèçÊáâ
  study: [
    'ÊÇ†ÊÇ†Êà¥ËëóÁúºÈè°Ë®òÁ≠ÜË®òÔºåÂä™ÂäõÂ≠∏ÁøíÊñ∞Áü•Ë≠ò',
    'ÊÇ†ÊÇ†ÊääËÄ≥ÊúµË≤ºËøëÊõ∏Êú¨Ôºå‰ºº‰πéÊÉ≥ËÅΩÊáÇË£°Èù¢ÁöÑËÅ≤Èü≥',
    'ÊÇ†ÊÇ†ÁúãËëóÊïôÁßëÊõ∏Áö∫ÁúâÔºåÂ∞æÂ∑¥ÊãçÊâìÊ∞¥Èù¢ÂΩ∑ÂΩøÂú®ÊÄùËÄÉ'
  ],
  // ÂÜ•ÊÉ≥ÊàñÈùúÂùêÁõ∏ÈóúÁöÑÂèçÊáâ
  meditate: [
    'ÊÇ†ÊÇ†Èñâ‰∏äÁúºÁùõÔºåÈõôÁà™ÂêàÂçÅÔºåÂú®Ê∞¥‰∏≠ÈùúÈùúÂÜ•ÊÉ≥',
    'ÊÇ†ÊÇ†Áõ§ËëóÂ∞æÂ∑¥ÔºåÊ∑±ÂëºÂê∏ÊîæÈ¨ÜÔºåÂë®ÂúçÊ∞£Ê∞õÂπ≥Èùú',
    'ÊÇ†ÊÇ†ÂùêÂú®Áü≥È†≠‰∏äÊ≤âÊÄùÔºåÂÅ∂ÁàæÁôºÂá∫ÊüîÂíåÁöÑÂïæËÅ≤'
  ],
  // ‰∏äÁ∂≤ÊàñÊªëÊâãÊ©üÁõ∏ÈóúÁöÑÂèçÊáâ
  surf: [
    'ÊÇ†ÊÇ†Áî®Áà™Â≠êÊï≤Êï≤Ë≤ùÊÆºÔºåÂ∞±ÂÉèÂú®‰∏äÁ∂≤ÊêúÂ∞ãÊù±Ë•ø',
    'ÊÇ†ÊÇ†ÁõØËëóÊºÇÊµÆÁöÑÊµ∑ËçâÔºåÁúãÂæóÂÖ•Á•ûÔºåÂÉèÂú®Âà∑Á§æÁæ§',
    'ÊÇ†ÊÇ†ÊªëÂãïÂ∞èÁü≥È†≠ÔºåÁøªÁúãË≤ùÊÆºÔºåÂ∞±ÂÉèÂú®ÊªëÊâãÊ©ü'
  ],
  // ÊóÖË°åÊàñÂÜíÈö™Áõ∏ÈóúÁöÑÂèçÊáâ
  travel: [
    'ÊÇ†ÊÇ†ËÉåËëóÂ∞èÂåÖÂåÖÔºåË∏èÂá∫Â∞èÁ™©ÂÉèË¶ÅÂéªÂÜíÈö™',
    'ÊÇ†ÊÇ†ÂùêÂú®ÊºÇÊµÆÁöÑÊú®È†≠‰∏äÔºåÁú∫ÊúõÈÅ†ÊñπÂÉèÂú®ÊóÖË°å',
    'ÊÇ†ÊÇ†ÊèÆÊâãÂëäÂà•ÔºåË∑≥ÂÖ•Ê∞¥‰∏≠Â±ïÈñãÊñ∞ÁöÑÊóÖÁ®ã'
  ],
  default: [
    'ÊÇ†ÊÇ†Ê≠™ËëóÈ†≠ÁúãÁúã‰Ω†Ôºå‰∏çÂ§™ÊòéÁôΩ‰ΩÜÈÇÑÊòØÂèØÊÑõÂú∞ÊèÆ‰∫ÜÊèÆÁà™',
    'ÊÇ†ÊÇ†Êªæ‰∫ÜÂÄãÂúàÂúàÔºåÂ∞æÂ∑¥ËºïÊãçÂú∞Èù¢Á§∫ÊÑèÁâ†ËÅΩ‰∏çÊáÇ'
  ]
};

/**
 * Randomly select an element from an array.
 */
function choice (arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

/**
 * Construct a reaction string by combining a base description with a random
 * emoticon and a random sound word. This yields a large number of unique
 * combinations (8 emoticons √ó 4 sounds √ó variations of bases).
 */
function buildReaction (base) {
  const emoji = choice(emoticons);
  const sound = choice(sounds);
  return `${base}${emoji}ÔΩû${sound}`;
}

/**
 * Determine the category of a user interaction message. Simple keyword
 * matching is used here; if no keywords match, returns 'default'.
 */
function getActionCategory (message) {
  if (/(Êó©ÂÆâ|Êó©‰∏äÂ•Ω|morning)/i.test(message)) return 'morning';
  if (/(ÊôöÂÆâ|good\s*night)/i.test(message)) return 'night';
  if (/(Êë∏|Êí´Êë∏|Êë∏Êë∏|pat)/i.test(message)) return 'pat';
  if (/(ÁúãÈõªË¶ñ|ÁúãÁîµËßÜ|tv)/i.test(message)) return 'tv';
  // Detect calling the otter's name or similar phrases
  if (/(ÂêçÂ≠ó|Âè´ÊÇ†ÊÇ†|Âè´Áâ†|Âè´‰Ω†|ÂëºÂñö)/i.test(message)) return 'name';
  // Detect feeding or giving snacks/food
  if (/(ÈªûÂøÉ|È§µ|Èõ∂È£ü|È£üÁâ©|snack)/i.test(message)) return 'feed';
  // Detect hugging or cuddling actions
  if (/(Êä±Êä±|ÊìÅÊä±|Êä±‰Ω†|Êä±Á∑ä)/i.test(message)) return 'hug';
  // Detect sleep related actions
  if (/(Áù°Ë¶∫|ÊâìÁûåÁù°|Áù°‰∏Ä‰∏ã|sleep|nap)/i.test(message)) return 'sleep';
  // Detect play or game actions
  if (/(Áé©|ÈÅäÊà≤|play|ÈÄóÂºÑ|ËÄç|ÈÄó)/i.test(message)) return 'play';
  // Detect eating actions
  if (/(ÂêÉÈ£Ø|ÂêÉÊù±Ë•ø|ÂêÉ|Áî®È§ê)/i.test(message)) return 'eat';
  // Detect drinking actions
  if (/(ÂñùÊ∞¥|ÂñùÈ£≤Êñô|Âñù|È£≤)/i.test(message)) return 'drink';
  // Detect exercise or running
  if (/(ÈÅãÂãï|Ë∑ëÊ≠•|Êï£Ê≠•|ÂÅ•Ë∫´|Ëµ∞Ë∑Ø)/i.test(message)) return 'exercise';
  // Detect dancing
  if (/(Ë∑≥Ëàû|ËàûËπà|Ë∑≥|Ëàû)/i.test(message)) return 'dance';
  // Detect singing
  if (/(Âî±Ê≠å|Âî±|Ê≠å)/i.test(message)) return 'sing';
  // Detect reading
  if (/(ÁúãÊõ∏|Èñ±ËÆÄ|ËÆÄÊõ∏|Êõ∏)/i.test(message)) return 'read';
  // Detect drawing or painting
  if (/(Áï´Áï´|Áï´Âúñ|Áπ™Áï´|Áï´)/i.test(message)) return 'draw';
  // Detect cleaning or washing
  if (/(ÊâìÊéÉ|Ê∏ÖÁêÜ|Ê∏ÖÊΩî|ÊéÉÂú∞|Ê¥óÊæ°)/i.test(message)) return 'clean';
  // Detect working
  if (/(Â∑•‰Ωú|‰∏äÁè≠|Ëæ¶ÂÖ¨)/i.test(message)) return 'work';
  // Detect shopping
  if (/(Ë≥ºÁâ©|Ë≤∑Êù±Ë•ø|ÈÄõË°ó|shopping|Ë≤∑)/i.test(message)) return 'shop';
  // Detect cooking
  if (/(ÁÉπÈ£™|ÁÖÆÈ£Ø|ÂÅöËèú|ÊñôÁêÜ)/i.test(message)) return 'cook';
  // Detect studying
  if (/(Â≠∏Áøí|ÂøµÊõ∏|study)/i.test(message)) return 'study';
  // Detect meditation
  if (/(ÂÜ•ÊÉ≥|ÈùúÂùê|meditate)/i.test(message)) return 'meditate';
  // Detect surfing/internet usage
  if (/(‰∏äÁ∂≤|ÊªëÊâãÊ©ü|Áî®ÊâãÊ©ü|internet|Á§æÁæ§)/i.test(message)) return 'surf';
  // Detect travelling
  if (/(ÊóÖË°å|ÊóÖÈÅä|Âá∫ÈñÄ|ÈÅ†Ë∂≥|Â§ñÂá∫)/i.test(message)) return 'travel';
  return 'default';
}

/**
 * Handle interactive messages that are not numeric adjustments or commands.
 * Generates a rich reaction from ÊÇ†ÊÇ† based on the detected action category.
 */
function handleInteraction (event, client, message) {
  const data = loadData();
  autoResetIfNewDay(data);
  const category = getActionCategory(message);
  const base = choice(actionBases[category] || actionBases.default);
  const reaction = buildReaction(base);
  return client.replyMessage(event.replyToken, { type: 'text', text: reaction });
}

/* --------------------------------------------------------------------------
 * Functions for adjusting smoking counts and handling commands
 * ------------------------------------------------------------------------ */

/**
 * Adjust today‚Äôs smoking count by the provided signed integer amount. Counts
 * never fall below zero. After adjustment, reply with a corresponding
 * reaction. For counts between 1 and 20, a predefined reaction is used; for
 * other counts, a generic comparison message is constructed.
 */
function handleAdjust (event, client, amount) {
  const data = loadData();
  autoResetIfNewDay(data);
  data.today += amount;
  if (data.today < 0) data.today = 0;
  saveData(data);
  let response;
  const n = data.today;
  if (n >= 1 && n <= 20) {
    response = countReactions[n - 1];
  } else if (n === 0) {
    response = '‰ªäÂ§©ÈÇÑÊ≤íÊäΩËè∏Ôºå‰øùÊåÅ‰∏ãÂéªÔºÅÊÇ†ÊÇ†ÈõôÊâãÂêàÊéåÁÇ∫‰Ω†ÊâìÊ∞£(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà';
  } else {
    response = `‰ªäÂ§©Á¨¨ ${n} ÊîØËè∏„ÄÇ`;
    if (n < data.yesterday) {
      response += `\nÊØîÊò®Â§©Â∞ë‰∫Ü ${data.yesterday - n} ÊîØÔºå‰∏çÈåØÂñîÔºÅ`;
    } else if (n === data.yesterday) {
      response += `\nÂ∑≤Á∂ìË∑üÊò®Â§©‰∏ÄÊ®£Â§ö‰∫ÜÔºåË¶ÅÂÖãÂà∂Âî∑„ÄÇ`;
    } else {
      response += `\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ ${n} ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü`;
    }
    response += '\nÊÇ†ÊÇ†Ê≠™ËëóÈ†≠ÁúãÁúã‰Ω†ÔºåÂ∞æÂ∑¥Âú®Ë∫´ÊóÅÂäÉÂúàÔºå‰ºº‰πéÂú®ÊÄùËÄÉ(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?';
  }
  return client.replyMessage(event.replyToken, { type: 'text', text: response });
}

/**
 * Handle slash commands starting with '/'. Recognised commands include:
 *   /Êü•Ë©¢ or /Êü•Ë©¢‰ªäÊó• ‚Äì report today/yesterday counts and streak.
 *   /Êü•Ë©¢Êò®Êó• ‚Äì report yesterday‚Äôs count only.
 *   /ÈáçË®≠ ‚Äì reset today‚Äôs count to zero.
 *   /Ë™™Êòé ‚Äì provide help text.
 */
async function handleCommand (msg, event, client) {
  const data = loadData();
  autoResetIfNewDay(data);
  // Weather inquiry command: fetch Taipei weather and reply with a report.
  if (msg === '/Â§©Ê∞£' || msg.toLowerCase() === '/weather') {
    try {
      const weather = await getTaipeiWeather();
      const report = composeWeatherReport(weather);
      return client.replyMessage(event.replyToken, { type: 'text', text: report });
    } catch (err) {
      return client.replyMessage(event.replyToken, { type: 'text', text: 'ÂèñÂæóÂ§©Ê∞£Ë≥áÊñôÂ§±Êïó„ÄÇ' });
    }
  }
  if (msg === '/Êü•Ë©¢' || msg === '/Êü•Ë©¢‰ªäÊó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‰ªäÊó•Â∑≤ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏Ôºö${data.streak} Â§©„ÄÇ`
    });
  }
  if (msg === '/Êü•Ë©¢Êò®Êó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `Êò®Êó•ÊäΩ‰∫Ü ${data.yesterday} ÊîØ„ÄÇ`
    });
  }
  if (msg === '/ÈáçË®≠') {
    data.today = 0;
    saveData(data);
    return client.replyMessage(event.replyToken, { type: 'text', text: '‰ªäÊó•Á¥ÄÈåÑÂ∑≤ÈáçË®≠ÁÇ∫ 0„ÄÇ' });
  }
  if (msg === '/Ë™™Êòé') {
    const help = [
      'ÂèØÁî®Êåá‰ª§Ôºö',
      '+1 Êàñ +nÔºöÂ¢ûÂä†‰ªäÊó•ÊäΩËè∏Êï∏',
      '-1 Êàñ -nÔºöÊ∏õÂ∞ë‰ªäÊó•ÊäΩËè∏Êï∏',
      '/Êü•Ë©¢ Êàñ /Êü•Ë©¢‰ªäÊó•ÔºöÊü•Áúã‰ªäÊó•ËàáÊò®Êó•ÊäΩËè∏Êï∏‰ª•ÂèäÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏',
      '/Êü•Ë©¢Êò®Êó•ÔºöÊü•ÁúãÊò®Êó•ÊäΩËè∏Êï∏',
      '/ÈáçË®≠ÔºöÈáçË®≠‰ªäÊó•Ë®àÊï∏ÁÇ∫ 0',
      '/Ë™™ÊòéÔºöÈ°ØÁ§∫ÈÄôÊÆµË™™Êòé',
      '/Â§©Ê∞£ Êàñ /weatherÔºöÊü•Ë©¢Âè∞ÂåóÂ∏Ç‰ªäÊó•Ê∞£Ë±°ËàáÊú™‰æÜ 6 Â∞èÊôÇÊ¶ÇÊ≥ÅÔºàÊ∫´Â∫¶„ÄÅÈôçÈõ®„ÄÅÊøïÂ∫¶„ÄÅÁ¥´Â§ñÁ∑ö„ÄÅÁ©∫Ê∞£ÂìÅË≥™Ôºâ',
      'ÂÖ∂‰ªñË®äÊÅØÂ∞áË¶ñÁÇ∫Â∞çÊÇ†ÊÇ†ÁöÑ‰∫íÂãïÔºåÁâ†ÊúÉ‰ª•ÂèØÊÑõÁöÑÂãï‰ΩúÂõûÊáâÂñî'
    ].join('\n');
    return client.replyMessage(event.replyToken, { type: 'text', text: help });
  }
  return client.replyMessage(event.replyToken, { type: 'text', text: 'ÁÑ°ÊïàÊåá‰ª§„ÄÇ' });
}

/**
 * Reset today‚Äôs count at scheduled time; move today to yesterday and zero it.
 */
function resetDaily () {
  const data = loadData();
  autoResetIfNewDay(data);
  data.yesterday = data.today;
  data.today = 0;
  saveData(data);
  console.log('ÊØèÊó•ÈáçÁΩÆÂÆåÊàê');
}

/**
 * Summarize the day‚Äôs results. If today‚Äôs count is less than yesterday‚Äôs,
 * increment the streak and award a prize (capped by rewards array length).
 * Sends messages via pushMessage including images and text where applicable.
 */
async function summarizeDay (client) {
  const data = loadData();
  autoResetIfNewDay(data);
  let reward = null;
  if (data.today < data.yesterday) {
    data.streak += 1;
    const stage = Math.min(data.streak, rewards.length);
    reward = rewards[stage - 1];
  } else {
    data.streak = 0;
  }
  saveData(data);
  const messages = [
    {
      type: 'text',
      text: `‰ªäÊó•ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÔºö${data.streak} Â§©„ÄÇ`
    }
  ];
  if (reward) {
    messages.push({ type: 'image', originalContentUrl: reward.image, previewImageUrl: reward.image });
    messages.push({ type: 'text', text: reward.text });
  }
  try {
    await client.pushMessage(process.env.USER_ID, messages);
    console.log('Êó•ÁµêË®äÊÅØÁôºÈÄÅÂÆåÁï¢');
  } catch (err) {
    console.error('Êé®ÈÄÅÊó•ÁµêË®äÊÅØÂ§±Êïó', err);
  }
}

module.exports = {
  handleAdjust,
  handleCommand,
  resetDaily,
  summarizeDay,
  handleInteraction,
  getTaipeiWeather,
  composeWeatherReport
};