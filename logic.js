// üìÅ logic.js

// This module handles data persistence, daily resets, command parsing and messaging
// for the smoking tracker bot. It maintains counts of cigarettes smoked today and
// yesterday, resets counts when a new day begins, and returns context-sensitive
// feedback messages. In addition, it implements a series of cute reactions from
// a virtual character named ÊÇ†ÊÇ† for counts from 1‚Äì20.

const fs = require('fs');
const path = './data.json';
const rewards = require('./rewards.json');

/**
 * Returns the current date in YYYY‚ÄëMM‚ÄëDD format (Asia/Taipei timezone).
 * A new date is computed on each call; this allows us to detect when a new day starts.
 */
function getToday () {
  const now = new Date();
  // Get local date string in ISO format without the time component.
  return now.toISOString().slice(0, 10);
}

/**
 * Ensure data.json exists. If not, create a fresh file with default fields.
 */
function ensureDataFile () {
  if (!fs.existsSync(path)) {
    const initial = { date: getToday(), today: 0, yesterday: 0, streak: 0 };
    fs.writeFileSync(path, JSON.stringify(initial, null, 2));
  }
}

/**
 * Load persisted counts from disk.
 */
function loadData () {
  ensureDataFile();
  const raw = fs.readFileSync(path);
  return JSON.parse(raw);
}

/**
 * Persist counts to disk.
 */
function saveData (data) {
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

/**
 * If the stored date is different from today, move today‚Äôs count to yesterday
 * and reset today‚Äôs count. Also reset the streak if we did not smoke fewer than
 * the previous day. This function mutates the provided data object and returns it.
 */
function autoResetIfNewDay (data) {
  const today = getToday();
  if (data.date !== today) {
    // Move today's count to yesterday and reset today
    data.yesterday = data.today;
    data.today = 0;
    data.date = today;
  }
  return data;
}

/**
 * Predefined reactions for each count from 1 to 20, inspired by the virtual
 * character ÊÇ†ÊÇ†. Each entry contains a complete message that includes the
 * cigarette count and a description of ÊÇ†ÊÇ†‚Äôs behaviour. These messages are
 * returned verbatim when the current daily count is within the range.
 */
const reactions = [
  // 1
  '‰ªäÂ§©Á¨¨ 1 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 1 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËÅΩÂà∞ÂæåÊâì‰∫ÜÂÄãÂìàÊ¨†ÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ëú∑Á∏ÆÂú®‰∏ÄËµ∑ÔºåÁú®‰∫ÜÁú®ÁúºÂ∞±Áù°Ëëó‰∫Ü(ÀòœâÀò).ÔΩ°oOüí§ÔΩûÂïæÔΩû',
  // 2
  '‰ªäÂ§©Á¨¨ 2 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 2 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áøª‰∫ÜÂÄãË∫´ÔºåÁî®Â∞èÁà™Â≠êÊãçÊãçËá™Â∑±ÁöÑËáâÈ†∞ÔºåÂèàÁî®Â∞æÂ∑¥Âú®Á©∫‰∏≠Áï´ÂúàÂúà(À∂Àö·¥óÀöÀ∂)ÔΩ°oO',
  // 3
  '‰ªäÂ§©Á¨¨ 3 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 3 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóÂ∞èÊâãËºïËºïÊèÆÊâãÔºåÁúºÁùõÁûáÊàê‰∏ÄÊ¢ùÁ∑öÔºåÁôºÂá∫ËºïËºïÁöÑÂïæÂïæËÅ≤(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿàüí®',
  // 4
  '‰ªäÂ§©Á¨¨ 4 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 4 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÊè£Âú®ËÉ∏ÂâçÔºåËÖ¶Ë¢ãÊ≠™‰∫Ü‰∏Ä‰∏ã(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?ÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìÂú∞Èù¢Êí≤ÈÄöÊí≤ÈÄö',
  // 5
  '‰ªäÂ§©Á¨¨ 5 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 5 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êíì‰∫ÜÊíìËÇöÂ≠êÔºå‰º∏Âá∫Â∞èÁà™Â≠êÂÅöÂá∫ÊìÅÊä±ÂßøÂã¢ÔºåÁúºÁ•û‰∫Æ‰∫ÆÂú∞ÁúãËëó‰Ω†(*¬¥‚àÄ`)Ôæâ',
  // 6
  '‰ªäÂ§©Á¨¨ 6 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 6 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊÇÑÊÇÑÂú∞Áî®Áà™Â≠êÈÅÆ‰ΩèÁúºÁùõÔºåÂÜçÂøΩÁÑ∂ÂºµÈñãÂÅöÂá∫È©öÂñúÁöÑÂãï‰Ωú(„Éª‚àÄ„Éª)„Éé',
  // 7
  '‰ªäÂ§©Á¨¨ 7 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 7 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ËºïËºïÊêñÊôÉËëóË∫´È´îÔºåÂ∞æÂ∑¥ÁπûÊàêÂ∞èÂúìÂúàÔºåÊúÄÂæåÊëüËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Ë∫∫Âπ≥ÂóöÂóöÔΩû',
  // 8
  '‰ªäÂ§©Á¨¨ 8 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 8 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÊâãÊãç‰∫ÜÊãçÊ∞¥Èù¢ÔºåÊø∫Âá∫Â∞èÊ∞¥Ëä±ÔºåÊèÆÊâãÁ§∫ÊÑè‰Ω†Èù†Ëøë(*‚âßœâ‚â¶)„Çû',
  // 9
  '‰ªäÂ§©Á¨¨ 9 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 9 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êâì‰∫ÜÂÄãÊªæÔºåËáâÈ†∞Ë≤ºÂú®Âú∞‰∏äÔºåÂ∞æÂ∑¥Áøπ‰∫ÜËµ∑‰æÜÔºåÂÅöÂá∫ÊííÂ¨åÁöÑÂãï‰Ωú( Àò‚Ä¢œâ‚Ä¢Àò )„Çù',
  // 10
  '‰ªäÂ§©Á¨¨ 10 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 10 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êí≤ÈÄö‰∏Ä‰∏ãË∂¥Âú®‰Ω†Èù¢ÂâçÔºåÁî®Áà™Â≠êËºïÊí´Ëá™Â∑±ÁöÑËáâÈ†∞ÔºåÈú≤Âá∫ÊúüÂæÖÁöÑÁúºÁ•û(‰∫∫¬¥‚àÄÔΩÄ)‚ô°',
  // 11
  '‰ªäÂ§©Á¨¨ 11 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 11 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÂÅ¥Ë∫´Ë∫∫ËëóÔºåÁúºÁùõÁú®ÂëÄÁú®ÔºåÂ∞æÂ∑¥ÁπûËëóËá™Â∑±Áï´ÂúìÔºåÂÉèÊòØÂú®ÊÄùËÄÉÂóöÂóöÔΩû',
  // 12
  '‰ªäÂ§©Á¨¨ 12 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 12 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÈõôÊâãÂêàÂçÅÊîæÂú®ËÉ∏ÂâçÔºåËáâÈ†∞ÂæÆÁ¥ÖÔºåÁî®ÂäõÊêñÈ†≠Ë°®Á§∫ÊííÂ¨åÁöÑÊãíÁµï(‡πë>‚ó°<‡πë)',
  // 13
  '‰ªäÂ§©Á¨¨ 13 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 13 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Á∏ÆÊàê‰∏ÄÂúòÔºåÂÜçÊÖ¢ÊÖ¢‰º∏Â±ïÂõõËÇ¢ÔºåÂ∞æÂ∑¥ËºïÈªûÂú∞Èù¢ÁôºÂá∫ÂïæÂïæËÅ≤(*ÀòÔ∏∂Àò*).ÔΩ°oO',
  // 14
  '‰ªäÂ§©Á¨¨ 14 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 14 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÔºåÁú®ÁúºÂæÆÁ¨ëÔºåÂ∞æÂ∑¥ËºïËºïÊãçÊâìËëóÂ∞èÊ∞¥Ëä±(‚âß‚ñΩ‚â¶)„Çû',
  // 15
  '‰ªäÂ§©Á¨¨ 15 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 15 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Â∞èÁà™Â≠êÊçÇ‰ΩèÂò¥Â∑¥ÔºåÂÉèÊòØÂú®ÊâìÂëµÊ¨†ÔºåÂèà‰º∏ÊâãÂêë‰Ω†Ë®éÊë∏Êë∏(À∂‚Äæ·∑Ñ ‚ÅªÃ´ ‚Äæ·∑ÖÀµ)',
  // 16
  '‰ªäÂ§©Á¨¨ 16 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 16 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Áî®Áà™Â≠êÊãçÊãçÊ∞¥Èù¢ÔºåÁÑ∂ÂæåÊä¨È†≠ÁúãËëó‰Ω†ÔºåÂ∞æÂ∑¥Áπû‰∫ÜÂπæÂúàÂæåÂÅúÂú®ËÉ∏Ââç(ÀòÔΩ•·¥óÔΩ•Àò)',
  // 17
  '‰ªäÂ§©Á¨¨ 17 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 17 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Â∞áÂ∞èÊâãÊîæÂú®ËáâÊóÅÔºåÁú®ÁúºË≥£ËêåÔºåÁî®Â∞æÂ∑¥ËºïÊãçËá™Â∑±ÂÉèÂú®Ëá™Ë®ÄËá™Ë™û(ÔΩ°>Ôπè<ÔΩ°)',
  // 18
  '‰ªäÂ§©Á¨¨ 18 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 18 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Âú®ÂéüÂú∞Êâì‰∫ÜÂÄãÊªæÔºåÊä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥ÊííÂ¨åÔºåËÄ≥ÈÇäÂÇ≥‰æÜËºïËºïÁöÑÂïæÂïæËÅ≤(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•',
  // 19
  '‰ªäÂ§©Á¨¨ 19 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 19 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†ÊääÂ∞æÂ∑¥ÁπûÊàêÊÑõÂøÉÂΩ¢ÁãÄÔºåËºïËºïÈªûÈ†≠ÂèàÊêñÈ†≠ÔºåÂÉèÊòØÂú®Ë°®Á§∫ÁüõÁõæ(‚ô°ÀôÔ∏∂Àô‚ô°)',
  // 20
  '‰ªäÂ§©Á¨¨ 20 ÊîØËè∏„ÄÇ\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ 20 ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü\nÊÇ†ÊÇ†Êä±ËëóËá™Â∑±ÁöÑÂ∞æÂ∑¥Âú®Ê∞¥Èù¢‰∏äÊÖ¢ÊÖ¢ÊâìËΩâÔºåÊúÄÂæåÈù†Âú®‰Ω†ËÖ≥ÈÇäÁù°Ëëó‰∫Ü( ·ê°-‹´-·ê° )üí§'
];

/**
 * Generate a response string based on the current counts. For counts between 1
 * and 20 inclusive, a predefined reaction from the virtual character ÊÇ†ÊÇ† is
 * returned. For zero or counts above 20, a generic response reflecting the
 * relationship to yesterday‚Äôs count is constructed. This keeps feedback
 * informative even when counts exceed the predefined range.
 */
function generateResponse (data) {
  const n = data.today;
  // Use customised reactions for 1‚Äì20 cigarettes.
  if (n >= 1 && n <= 20) {
    return reactions[n - 1];
  }
  // Generic message for zero cigarettes
  if (n === 0) {
    return '‰ªäÂ§©ÈÇÑÊ≤íÊäΩËè∏Ôºå‰øùÊåÅ‰∏ãÂéªÔºÅÊÇ†ÊÇ†ÈõôÊâãÂêàÊéåÁÇ∫‰Ω†ÊâìÊ∞£(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà';
  }
  // Generic message for counts over 20
  let message = `‰ªäÂ§©Á¨¨ ${n} ÊîØËè∏„ÄÇ`;
  if (n < data.yesterday) {
    message += `\nÊØîÊò®Â§©Â∞ë‰∫Ü ${data.yesterday - n} ÊîØÔºå‰∏çÈåØÂñîÔºÅ`;
  } else if (n === data.yesterday) {
    message += `\nÂ∑≤Á∂ìË∑üÊò®Â§©‰∏ÄÊ®£Â§ö‰∫ÜÔºåË¶ÅÂÖãÂà∂Âî∑„ÄÇ`;
  } else {
    message += `\nË∂ÖÈÅéÊò®Â§©‰∫ÜÔºåÁèæÂú®ÊòØ ${n} ÊîØ„ÄÇÈÇÑÊÉ≥ÊãøÁçéÂãµÂóéÔºü`;
  }
  message += '\nÊÇ†ÊÇ†Ê≠™ËëóÈ†≠ÁúãÁúã‰Ω†ÔºåÂ∞æÂ∑¥Âú®Ë∫´ÊóÅÂäÉÂúàÔºå‰ºº‰πéÂú®ÊÄùËÄÉ(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)?';
  return message;
}

/**
 * Update the count based on the provided amount. Positive amounts increment
 * today‚Äôs count, and negative amounts decrement it. Counts never fall below
 * zero. After updating, a reaction message is sent via the client.
 */
function handleAdjust (event, client, amount) {
  const data = loadData();
  autoResetIfNewDay(data);
  data.today += amount;
  if (data.today < 0) data.today = 0;
  saveData(data);
  const response = generateResponse(data);
  return client.replyMessage(event.replyToken, { type: 'text', text: response });
}

/**
 * Process bot commands. Recognised commands:
 *  - /Êü•Ë©¢ Êàñ /Êü•Ë©¢‰ªäÊó•ÔºöÂõûË¶Ü‰ªäÊó•ÊäΩËè∏Êï∏„ÄÅÊò®Êó•„ÄÅ‰ª•ÂèäÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏„ÄÇ
 *  - /Êü•Ë©¢Êò®Êó•ÔºöÂõûË¶ÜÊò®Êó•ÊäΩËè∏Êï∏„ÄÇ
 *  - /ÈáçË®≠ÔºöÂ∞á‰ªäÊó•Ë®àÊï∏Ê≠∏Èõ∂„ÄÇ
 *  - /Ë™™ÊòéÔºöÈ°ØÁ§∫ÂèØÁî®Êåá‰ª§ËàáË™™Êòé„ÄÇ
 */
function handleCommand (msg, event, client) {
  const data = loadData();
  autoResetIfNewDay(data);
  if (msg === '/Êü•Ë©¢' || msg === '/Êü•Ë©¢‰ªäÊó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‰ªäÊó•Â∑≤ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏Ôºö${data.streak} Â§©„ÄÇ`
    });
  }
  if (msg === '/Êü•Ë©¢Êò®Êó•') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `Êò®Êó•ÊäΩ‰∫Ü ${data.yesterday} ÊîØ„ÄÇ`
    });
  }
  if (msg === '/ÈáçË®≠') {
    data.today = 0;
    saveData(data);
    return client.replyMessage(event.replyToken, { type: 'text', text: '‰ªäÊó•Á¥ÄÈåÑÂ∑≤ÈáçË®≠ÁÇ∫ 0„ÄÇ' });
  }
  if (msg === '/Ë™™Êòé') {
    const help = [
      'ÂèØÁî®Êåá‰ª§Ôºö',
      '+1 Êàñ +nÔºöÂ¢ûÂä†‰ªäÊó•ÊäΩËè∏Êï∏',
      '-1 Êàñ -nÔºöÊ∏õÂ∞ë‰ªäÊó•ÊäΩËè∏Êï∏',
      '/Êü•Ë©¢ Êàñ /Êü•Ë©¢‰ªäÊó•ÔºöÊü•Áúã‰ªäÊó•ËàáÊò®Êó•ÊäΩËè∏Êï∏‰ª•ÂèäÈÄ£Á∫åÊ∏õÈáèÂ§©Êï∏',
      '/Êü•Ë©¢Êò®Êó•ÔºöÊü•ÁúãÊò®Êó•ÊäΩËè∏Êï∏',
      '/ÈáçË®≠ÔºöÈáçË®≠‰ªäÊó•Ë®àÊï∏ÁÇ∫ 0',
      '/Ë™™ÊòéÔºöÈ°ØÁ§∫ÈÄôÊÆµË™™Êòé'
    ].join('\n');
    return client.replyMessage(event.replyToken, { type: 'text', text: help });
  }
  return client.replyMessage(event.replyToken, { type: 'text', text: 'ÁÑ°ÊïàÊåá‰ª§„ÄÇ' });
}

/**
 * Resets the daily count at the end of the day. This function is scheduled to
 * run via node‚Äëschedule. When executed, today‚Äôs count becomes yesterday‚Äôs count
 * and today resets to zero. The streak persists and will be updated in
 * summarizeDay().
 */
function resetDaily () {
  const data = loadData();
  autoResetIfNewDay(data);
  // At reset time, data.date should already equal today. We need to move
  // today‚Äôs count to yesterday and zero out today.
  data.yesterday = data.today;
  data.today = 0;
  saveData(data);
  console.log('ÊØèÊó•ÈáçÁΩÆÂÆåÊàê');
}

/**
 * Summarize the day‚Äôs results and send a push message to the user. If the user
 * smoked fewer cigarettes today than yesterday, increment the streak and award
 * a reward based on the streak count (capped by the length of rewards.json).
 * Otherwise reset the streak. Sends both text and image messages when
 * appropriate.
 */
function summarizeDay (client) {
  const data = loadData();
  autoResetIfNewDay(data);
  let reward = null;
  if (data.today < data.yesterday) {
    data.streak += 1;
    const stage = Math.min(data.streak, rewards.length);
    reward = rewards[stage - 1];
  } else {
    data.streak = 0;
  }
  saveData(data);
  const messages = [
    {
      type: 'text',
      text: `‰ªäÊó•ÊäΩ ${data.today} ÊîØÔºåÊò®Êó• ${data.yesterday} ÊîØÔºåÈÄ£Á∫åÊ∏õÈáèÔºö${data.streak} Â§©„ÄÇ`
    }
  ];
  if (reward) {
    messages.push({ type: 'image', originalContentUrl: reward.image, previewImageUrl: reward.image });
    messages.push({ type: 'text', text: reward.text });
  }
  client.pushMessage(process.env.USER_ID, messages);
  console.log('Êó•ÁµêË®äÊÅØÁôºÈÄÅÂÆåÁï¢');
}

module.exports = { handleAdjust, handleCommand, resetDaily, summarizeDay };